/*
 * ests Kinesis 260 pro personal config
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    behaviors {
      #include "macros.dtsi"
      
      // ltt: layer_tap_tap {
      //     compatible = "zmk,behavior-hold-tap";
      //     label = "LAYER_TAP_TAP";
      //     #binding-cells = <2>;
      //     flavor = "hold-preferred";
      //     tapping-term-ms = <250>;
      //     quick-tap-ms = <200>;
      //     global-quick-tap;
      //     bindings = <&mo>, <&kp>;
      // };

      // press once for shift, twice for caps_word
      // td0: tap_dance_0 {
      //     compatible = "zmk,behavior-tap-dance";
      //     label = "TAP_DANCE_0";
      //     #binding-cells = <0>;
      //     tapping-term-ms = <210>;
      //     bindings = <&kp LSHFT>, <&caps_word>;
      // };

      // td1: tap_dance_1 {
      //     compatible = "zmk,behavior-tap-dance";
      //     label = "TAP_DANCE_1";
      //     #binding-cells = <0>;
      //     tapping-term-ms = <210>;
      //     bindings = <&mo 4>, <&mo 5>;
      // };

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick-tap-ms = <125>;
          flavor = "tap-preferred";
          global-quick-tap;
          bindings = <&kp>, <&kp>;
      };
    };

    macros {
        // ba0: ba0 {
        //     label = "ZM_ba0";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&kp LBKT &kp N0 &kp RBKT>
        //         ;
        // };
        // ba1: ba1 {
        //     label = "ZM_ba1";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&kp LBKT &kp N1 &kp RBKT>
        //         ;
        // };
        // ba2: ba2 {
        //     label = "ZM_ba2";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&kp LBKT &kp N2 &kp RBKT>
        //         ;
        // };

        cmd_space: cmd_space {
            label = "ZM_cmd_space";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCMD>
                , <&macro_tap &kp SPACE>
                , <&macro_release &kp LCMD>
                ;
        };

        tmux: tmux {
            label = "ZM_tmux";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp A>
                , <&macro_release &kp LCTRL>
                ;
        };

        tmux_n: tmux_n {
            label = "ZM_tmux_n";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp A>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp N>
                ;
        };

        tmux_p: tmux_p {
            label = "ZM_tmux_p";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp A>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp P>
                ;
        };
    };

    combos {
      compatible = "zmk,combos";
      combo_enter {
        timeout-ms = <30>;
        key-positions = <31 32>;
        bindings = <&kp ENTER>;
      };

      combo_tab {
        timeout-ms = <40>;
        key-positions = <29 30>;
        bindings = <&kp TAB>;
      };
    };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL      &kp N1      &kp N2       &kp N3        &kp N4  &kp N5     &tog 1                                                                     &mo 3   &kp N6        &kp N7       &kp N8        &kp N9         &kp N0 &kp MINUS
   &kp TAB       &kp Q       &kp W        &kp E         &kp R   &kp T    &kp F10                                                                    &kp F9   &kp Y         &kp U        &kp I         &kp O          &kp P   &kp BSLH
    &gresc  &hm LALT A  &hm LCMD S  &hm LCTRL D   &hm LSHFT F   &kp G     &kp F7    &cmd_space   &kp LCMD   &none   &none   &kp LCMD      &tmux     &kp F8   &kp H   &hm RSHFT J  &hm RCTRL K    &hm RCMD L  &hm LALT SEMI    &kp SQT
&kp LSHIFT       &kp Z       &kp X        &kp C         &kp V   &kp B      &none         &none   &kp HOME   &none   &none  &kp PG_UP      &none      &none   &kp N         &kp M    &kp COMMA       &kp DOT       &kp FSLH &kp RSHIFT
     &mo 2   &kp GRAVE    &kp CAPS     &kp LEFT     &kp RIGHT           &kp BSPC     &lt 4 TAB    &kp END                  &kp PG_DN  &kp ENTER  &kp SPACE              &kp DOWN       &kp UP      &kp LBKT       &kp RBKT      &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1      &kp N2    &kp N3     &kp N4  &kp N5    &trans                                                                        &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q       &kp W     &kp E      &kp R   &kp T     &none                                                                        &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A       &kp S     &kp D      &kp F   &kp G     &none         &kp LCTRL  &kp LALT   &none   &none   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z       &kp X     &kp C      &kp V   &kp B     &none             &none  &kp HOME   &none   &none  &kp PG_UP      &none      &none   &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp TILDE    &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp LEFT_CONTROL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &trans        &trans     &kp KP_DOT           &trans      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &tog 0                                                   &mo 3  &kp F7          &kp F8        &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans    &trans                                                  &trans  &trans          &trans        &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans   &none   &none  &trans  &trans  &trans  &trans  &kp DOWN_ARROW  &kp UP_ARROW   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans     &none   &none  &trans   &none   &none  &trans   &none   &none  &trans          &trans        &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                  &trans  &trans  &trans                  &trans        &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &none                                                                              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none              &bootloader                                                                         &bootloader         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none   &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none   &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none                    &none       &none   &none   &none   &none       &none       &none                   &none         &none         &none         &none         &none         &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                        &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none   &none
            >;
        };

        layer_Layer__4 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &kp LBCR  &kp RBRC  &kp LBKT  &kp RBKT   &trans                                      &trans  &trans       &kp LBKT    &kp RBKT  &kp LBRC  &kp RBRC  &kp PIPE
 &trans  &kp MINUS  &kp PLUS  &kp EQUAL  &kp UNDER  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp UNDER   &kp EQUAL  &kp PLUS  &kp MINUS  &kp DQT
 &trans  &trans  &trans  &tmux_p  &tmux_n  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LT  &kp GT  &trans  &trans
 &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Layer__5 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans   &trans                                                  &trans  &trans    &trans    &trans    &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp UNDER  &kp PLUS  &kp LBRC  &kp RBRC  &trans
 &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
